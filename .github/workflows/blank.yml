name: Release New Version

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      updateType:
        description: 'Update type.'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'

env:
  VERSION_FILE: samples/VERSION

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Update Version
        run: |
          # ファイルからバージョンを読み取る
          version=$(cat ${{ env.VERSION_FILE }})

          # バージョンをドットで分割して配列に格納する
          IFS='.' read -ra VERSION <<< "$version"

          echo "Update type: $TYPE"

          # 引数によって対応するバージョン番号を増加させる
          case $TYPE in
            "major")
              VERSION[0]=$(expr ${VERSION[0]} + 1)
              VERSION[1]=0
              VERSION[2]=0
              ;;
            "minor")
              VERSION[1]=$(expr ${VERSION[1]} + 1)
              VERSION[2]=0
              ;;
            "patch")
              VERSION[2]=$(expr ${VERSION[2]} + 1)
              ;;
            *)
              echo "Unknown argument: $TYPE"
              echo "Please use one of the following arguments: major, minor, patch"
              exit 1
          esac

          # バージョンを更新してファイルに書き込む
          new_version="${VERSION[0]}.${VERSION[1]}.${VERSION[2]}"
          echo "TAG_NAME=v$new_version" >> $GITHUB_ENV
          echo $new_version > ${{ env.VERSION_FILE }}
        env:
          TYPE: ${{ inputs.updateType }}

      # - name: Build
      #   run: |
      #     python setup.py sdist --format=zip

      - name: Commit VERSION file
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

          git add ${{ env.VERSION_FILE }}
          git commit -m "Release $TAG_NAME"
          git push

      - name: Release
        uses: softprops/action-gh-release@v1
        id: release
        continue-on-error: true
        with:
          files: dist/*.zip
          tag_name: ${{ env.TAG_NAME }}

      - name: Rollback on Error
        if: ${{ steps.release.outcome == 'failure' }}
        run: |
          echo "Rollback commit"
          git reset --hard HEAD^
          git push -f

          exit 1
